# -*- coding: utf-8 -*-
"""Copy of rapids_cudf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aKWRrCVaCsASb8G9vBF3MOSx7ctpNveM

# RAPIDS cuDF

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ritchieng/deep-learning-wizard/blob/master/docs/machine_learning/gpu/rapids_cudf.ipynb)

## Environment Setup

### Check Version

#### Python Version
"""

# Check Python Version
!python --version

"""#### Ubuntu Version"""

# Check Ubuntu Version
!lsb_release -a

"""#### Check CUDA Version"""

# Check CUDA/cuDNN Version
!nvcc -V && which nvcc

"""#### Check GPU Version"""

# Check GPU
!nvidia-smi

"""#Setup:
This set up script:

1. Checks to make sure that the GPU is RAPIDS compatible
1. Installs the **current stable version** of RAPIDSAI's core libraries using pip, which are:
  1. cuDF
  1. cuML
  1. cuGraph
  1. xgboost

**This will complete in about 3-4 minutes**

Please use the [RAPIDS Conda Colab Template notebook](https://colab.research.google.com/drive/1TAAi_szMfWqRfHVfjGSqnGVLr_ztzUM9) if you need to install any of RAPIDS Extended libraries, such as:
- cuSpatial
- cuSignal
- cuxFilter
- cuCIM

OR
- nightly versions of any library
"""

# This get the RAPIDS-Colab install files and test check your GPU.  Run this and the next cell only.
# Please read the output of this cell.  If your Colab Instance is not RAPIDS compatible, it will warn you and give you remediation steps.
#!git clone https://github.com/rapidsai/rapidsai-csp-utils.git
#!python rapidsai-csp-utils/colab/pip-install.py

"""## Critical Imports"""

# Critical imports
import cudf
import cuml
import os
import numpy as np
import pandas as pd

"""## Creating

### Create a Series of integers
"""

gdf = cudf.Series([1, 2, 3, 4, 5, 6])
print(gdf)
print(type(gdf))

"""### Create a Series of floats"""

gdf = cudf.Series([1., 2., 3., 4., 5., 6.])
print(gdf)

"""### Create a  Series of strings

"""

gdf = cudf.Series(['a', 'b', 'c'])
print(gdf)

"""### Create 3 column DataFrame
- Consisting of dates, integers and floats
"""

# Import
import datetime as dt

# Using a dictionary of key-value pairs
# Each key in the dictionary represents a category
# The key is the category's name
# The value is a list of the values in that category
gdf = cudf.DataFrame({
    # Create 10 busindates ess from 1st January 2019 via pandas
    'dates': pd.date_range('1/1/2019', periods=10, freq='B'),
    # Integers
    'integers': [i for i in range(10)],
    # Floats
    'floats': [float(i) for i in range(10)]
})

# Print dataframe
print(gdf)

"""### Create 2 column Dataframe
- Consisting of integers and string category
"""

# Using a dictionary
# Each key in the dictionary represents a category
# The key is the category's name
# The value is a list of the values in that category
gdf = cudf.DataFrame({
    'integers': [1 ,2, 3, 4],
    'string': ['a', 'b', 'c', 'd']
})

print(gdf)

"""### Create a 2 Column  Dataframe with Pandas Bridge
- Consisting of integers and string category
- For all string columns, you must convert them to type `category` for filtering functions to work intuitively (for now)
"""

# Create pandas dataframe
pandas_df = pd.DataFrame({
    'integers': [1, 2, 3, 4],
    'strings': ['a', 'b', 'c', 'd']
})

# Convert string column to category format
pandas_df['strings'] = pandas_df['strings'].astype('category')

# Bridge from pandas to cudf
gdf = cudf.DataFrame.from_pandas(pandas_df)

# Print dataframe
print(gdf)

"""## Viewing

### Printing Column Names
"""

gdf.columns

"""### Viewing Top of DataFrame"""

num_of_rows_to_view = 2
print(gdf.head(num_of_rows_to_view))

"""### Viewing Bottom of DataFrame"""

num_of_rows_to_view = 3
print(gdf.tail(num_of_rows_to_view))

"""## Filtering

### Method 1: Query

#### Filtering Integers/Floats by Column Values
- This only works for floats and integers, not for strings
"""

# DO NOT RUN
# TOFIX: `cffi` package version mismatch error
print(gdf.query('integers == 1'))

"""#### Filtering Strings by Column Values
- This only works for floats and integers, not for strings so this will return an error!
"""

print(gdf.query('strings == a'))

"""### Method 2:  Simple Columns

#### Filtering Strings by Column Values
"""

# Filtering based on the string column
print(gdf[gdf.strings == 'b'])

"""#### Filtering Integers/Floats by Column Values"""

# Filtering based on the string column
print(gdf[gdf.integers == 2])

"""### Method 2:  Simple Rows

#### Filtering by Row Numbers
"""

# Filter rows 0 to 2 (not inclusive of the third row with the index 2)
print(gdf[0:2])

"""### Method 3:  loc[rows, columns]"""

# The syntax is as follows loc[rows, columns] allowing you to choose rows and columns accordingly
# The example allows us to filter the first 3 rows (inclusive) of the column integers
print(gdf.loc[0:2, ['integers']])

